<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>无所不为轩</title><link href="feeds/" rel="alternate"></link><link href="feeds/feeds/all.atom.xml" rel="self"></link><id>feeds/</id><updated>2013-07-02T01:33:26+08:00</updated><entry><title>怪想法—关于缓解C/S之间的“交流障碍”</title><link href="feeds/guai-xiang-fa-guan-yu-huan-jie-cszhi-jian-de-jiao-liu-zhang-ai.html" rel="alternate"></link><updated>2013-07-02T01:33:26+08:00</updated><author><name>cupen</name></author><id>tag:feeds,2013-07-02:guai-xiang-fa-guan-yu-huan-jie-cszhi-jian-de-jiao-liu-zhang-ai.html</id><summary type="html">&lt;p&gt;本想法应用场景是在 HTTP这种“请求-应答”式的数据交换方式下。
先描述一个普通web应用的运作,不要在意细节 ;)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Client 向Server发出请求;&lt;/li&gt;
&lt;li&gt;Server收到请求处理之，然后发出应答;&lt;/li&gt;
&lt;li&gt;Client 收到应答;&lt;/li&gt;
&lt;li&gt;Client 分析应答，并产生对应的“行为&amp;quot;;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如上，普通web应用的运作过程就是不断地重复以上步骤。&lt;/p&gt;
&lt;p&gt;且看编号 4 里描述的，Client需要解读Server应答过来的数据，然后做出相应的”行为&amp;quot;，这里的行为
可以是弹个窗、播个动画之类或者干脆是再发个请求等等。这就需要Client和Server之间立一个小约定，
或者叫“单方面协议”。这个“单方面协议”约定了Server端应答过来的各项数据的含义，Client程序按照约
定来理解其含义即可。至于数据格式用什么，目前小子知道的仅有：二进制的Msgpack,Protocol buffers
等等，纯文本的JSON,XML,甚至是脚本语言源码（如JavaScript）。&lt;/p&gt;
&lt;p&gt;如此，也就万事大吉了，程序员们就可以安心回家睡觉觉了。但是，Server程序需要提供的数据形式远远
不止一个，可能得成百上千乃至上万。而这些数据可能由不同的接口提供，并且这些接口的数量也可能成
百上千乃至上万，更要命的是这些接口又是由不同的coder在不同的时间不同的状态下coding而成。失恋
的coder、陷入爱河的coder、屌丝coder和高富帅coder，他们在代码上的设计肯定是千差万别，如果数据
的含义由他们各自拟定的话，得让他们达成共识才行，否则随着接口数量的增加，数据含义也会越来越多，
能搞清它的人会越来越少，文档会越写越让人不想看。&lt;/p&gt;
&lt;p&gt;目前小子使用给数据集合编号的方式解决这个问题，我很荣幸、很无耻地将每个数据单位称为消息。&lt;/p&gt;
&lt;p&gt;未完待续……
欲知后事如何，请听下个月分解。&lt;/p&gt;
</summary><category term="http"></category><category term="cs"></category></entry><entry><title>小用xdebug</title><link href="feeds/xiao-yong-xdebug.html" rel="alternate"></link><updated>2013-05-17T00:12:41+08:00</updated><author><name>cupen</name></author><id>tag:feeds,2013-05-17:xiao-yong-xdebug.html</id><summary type="html">&lt;p&gt;经常忘了xdebug的配置，老查文档慢的要死，挑出常用的配置记录一下。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;关于IDE和一些其它周边工具以后再补充吧。&lt;/div&gt;
&lt;div class="line"&gt;超详细的使用实例: &lt;a class="reference external" href="http://xdebug.org/docs/all"&gt;http://xdebug.org/docs/all&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;超详细的配置说明: &lt;a class="reference external" href="http://xdebug.org/docs/all_settings"&gt;http://xdebug.org/docs/all_settings&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[XDebug]&lt;/span&gt;
&lt;span class="c1"&gt;; 所有可配置项见 http://xdebug.org/docs/all_settings&lt;/span&gt;
&lt;span class="na"&gt;zend_extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/local/app/bin/php/ext/php_xdebug.so&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;; 分析信息用追加方式写入文件，&lt;/span&gt;
&lt;span class="c1"&gt;; 使用触发的方式，不需要每次运行都分析。 在参数或者cookie里加入 XDEBUG_PROFILE&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_append&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_enable_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;; 配置文件存放位置 %s表示脚本名（带路径）&lt;/span&gt;
&lt;span class="c1"&gt;; 文件名含义同trace_output_name, 见：http://xdebug.org/docs/all_settings#trace_output_name&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/local/app/bin/php/trace/profiler/&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xdebug.profiler_output_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;profiler.%s.txt&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;; 远程调试相关的设置&lt;/span&gt;
&lt;span class="na"&gt;xdebug.remote_enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;on&lt;/span&gt;
&lt;span class="na"&gt;xdebug.remote_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dbgp&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xdebug.remote_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xdebug.remote_prot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;9000&lt;/span&gt;

&lt;span class="c1"&gt;; trace文件的存放&lt;/span&gt;
&lt;span class="c1"&gt;; 文件名含义见 http://xdebug.org/docs/all_settings#trace_output_name&lt;/span&gt;
&lt;span class="na"&gt;xdebug.trace_output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/local/app/bin/php/trace/trace/&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xdebug.trace_output_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;trace.%s&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;; trace信息是否按是否以追加方式写入到文件（为啥不是apend？）&lt;/span&gt;
&lt;span class="c1"&gt;; 0 表示覆盖式写入文件&lt;/span&gt;
&lt;span class="c1"&gt;; 1 表示追加式写入文件&lt;/span&gt;
&lt;span class="na"&gt;xdebug.trace_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;; 不需要自动trace,除非你希望每次执行都会trace(与auto_trace互斥)&lt;/span&gt;
    &lt;span class="c1"&gt;; 触发trace的方式: 在参数或cookie里加入XDEBUG_TRACE&lt;/span&gt;
&lt;span class="na"&gt;xdebug.auto_trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;xdebug.trace_enable_trigger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;


&lt;span class="c1"&gt;; 收集变量的赋值&lt;/span&gt;
&lt;span class="na"&gt;xdebug.collect_assignments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;; 收集-包含语句&lt;/span&gt;
&lt;span class="c1"&gt;; 使用 include(), include_once(), require() require_once()引入的脚本名会被记录下来&lt;/span&gt;
&lt;span class="na"&gt;xdebug.collect_includes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;; 收集函数的参数&lt;/span&gt;
&lt;span class="c1"&gt;; 1 表示仅记录参数类型和长度 (f.e. string(6), array(8))&lt;/span&gt;
&lt;span class="c1"&gt;; 2 表示仅记录参数类型和长度 ，以及简略信息。 （好吧，我懒得用这个参数，不知具体效果）&lt;/span&gt;
&lt;span class="c1"&gt;; 3 表示仅记录参数的内容 至于记录的限度，得看关于变量显示限度的设置&lt;/span&gt;
&lt;span class="c1"&gt;;           xdebug.var_display_max_children,&lt;/span&gt;
&lt;span class="c1"&gt;;           xdebug.var_display_max_data&lt;/span&gt;
&lt;span class="c1"&gt;;           xdebug.var_display_max_depth.&lt;/span&gt;
&lt;span class="c1"&gt;; 4 表示记录参数的名字和全部内容，不受变量显示限度设置的影响&lt;/span&gt;
&lt;span class="na"&gt;xdebug.collect_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;

&lt;span class="c1"&gt;; 收集函数的返回值&lt;/span&gt;
&lt;span class="na"&gt;xdebug.collect_return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;; trace信息格式&lt;/span&gt;
&lt;span class="c1"&gt;; 0 给人看的格式（默认值）&lt;/span&gt;
&lt;span class="c1"&gt;; 1 给程序解析用的格式 （给其它工具设计的）&lt;/span&gt;
&lt;span class="c1"&gt;; 2 html文本（信息量太少了）&lt;/span&gt;
&lt;span class="na"&gt;xdebug.trace_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="xdebug"></category><category term="php"></category></entry><entry><title>pelican初步使用</title><link href="feeds/my-super-post.html" rel="alternate"></link><updated>2013-04-01T01:44:55+08:00</updated><author><name>Cupen&lt;Cupenoruler AT foxmail DOT com&gt;</name></author><id>tag:feeds,2013-04-01:my-super-post.html</id><summary type="html">&lt;p&gt;准备列一个pelican的初步使用说明~&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;好吧，这个已经被说的很多了，我就不重复吹了。实在懒得话就看一下文档里的quick-satrt。&lt;/div&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="doc"></category></entry></feed>